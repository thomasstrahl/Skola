predicate 
knapsack(int:n, array[int] of int:w, array[int] of int:p, 
         var int: W, var int: P, array[int] of var int:x) = 
	assert(index_set(w) = 1..n,  
		"index set of weights must be 1..n",
	assert(index_set(p) = 1..n,  
		"index set of profits must be 1..n",
	assert(lb(x) >= 0,
		"variables in knapsack must be non-negative",
	assert(lb(w) >= 0,
		"weights in knapsack must be non-negative",

	% Decomposition
%	P = sum(i in 1..n) (x[i]*p[i])
%	/\
%	W = sum(i in 1..n) (x[i]*w[i])

	 jacop_knapsack(w,p,W,P,x)

	 ))));

predicate
jacop_knapsack(array[int] of int:w, array[int] of int:p, 
         var int: W, var int: P, array[int] of var int:x);
