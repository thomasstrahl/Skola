% RUNS ON fzn_yacc
% RUNS ON fzn_parse
% Zinc-only type constraint
(int: x where true): a;

% Zinc/MiniZinc-only strings
string: s;

% Zinc-only lists
list of int: s;

% Zinc-only tuple
tuple(int,int): x;

% Zinc-only record
record(int:a): x;

% Zinc/MiniZinc-only type variable
$T: x;

% Zinc/MiniZinc-only multi-dim array
array[1..2, 1..3] of int: x;      % ok syntax, invalid type

% No parens around type-inst exprs
(int): a;

% 'par' not allowed
par int: a;

% The first is correct, the rest are broken.
array [1..3] of var int: x;
array  1..3] of var int: x;
array [ ..3] of var int: x;
array [1  3] of var int: x;
array [1.. ] of var int: x;
array [1..3  of var int: x;
array [1..3     var int: x;
array [1..3] of par int: x;
array [1.0..3.0] of int: x;

% Sets
var set of float:          s1;      % type error, but ok syntax-wise
var set of bool:           s2;      % type error, but ok syntax-wise
set of var int:            s3;
set of set of int:         s4;
set of array[1..3] of int: s5;

% Arrays
array[1..3] of set of set of int:  a1;
array[1..3] of array[1..3] of int: a2;
var array[1..3] of int:            a3;
array[int] of int:                 a4;

set of int: s6;
array[s6] of int: a5;

set of int: s7 = {1,3,5};   % ok
array[s7] of int: a4;

1..3.0: x = 3;
1.0..3: x = 3;

solve satisfy;
