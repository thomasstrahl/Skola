% RUNS ON fzn_yacc
% RUNS ON fzn_parse
%
% Zinc/MiniZinc-only unfixed value
int: x = _;

% Zinc/MiniZinc-only binary and unary operators
int: x = a + b - c * -d;
int: x = not b and c <-> d;
int: x = -y;
int: x = - 1;

% Zinc/MiniZinc-only set comprehension
int: x = { i | i,j in 1..3, k in 1..i+j where i mod 2 == 0 };

% Zinc/MiniZinc-only simple array comprehension
int: x = [i | i in 1..3];

% Zinc/MiniZinc-only 2d array literal
array[1..4] of int: x = [|1, 2 | 3, 4|];

% Zinc/MiniZinc-only indexed array literal
array[1..3] of int: x = [1:0, 2:2, 3:3];

% Zinc/MiniZinc-only indexed array comprehension
array[1..4] of int: x = [i:i | i in 1..4];

% Zinc-only tuple expression
int: x = (1,2,3);

% Zinc-only record expression
int: x = (x:1, y:2);

% Zinc-only variant record expression
int: x = foo(x:1, y:2);

% Zinc/MiniZinc-only if-then-else
int: x = if C1 then X elseif C2 then Y else Z endif;

% Zinc-only case expression
int: x = case (a) { x --> y };

% Zinc/MiniZinc-only let expression
int: x = let { int: a = 1 } in a;

% Zinc/MiniZinc-only generator call expression
int: x = foo(i in 1..5) (i);

% Zinc/MiniZinc-only multi-dim array access
int: x = a[1,2,3];

% Zinc-only record access
int: x = a.b;

% Zinc-only tuple access
int: x = a.1;

% Zinc/MiniZinc-only operators in single quotes
int: x = '+'(3,4);

% Identifiers in back quotes
int: x = 3 `foo` 4;

% Some too-big numbers (for 32-bits, at least)
int: x = 2147483648;        % just too big
int: x = -2147483649;       % just too small
int: x = 0x9999999999;      % way too big
int: x = -0o77777777777;    % way too small

solve satisfy;
