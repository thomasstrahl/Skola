package map;

import java.util.NoSuchElementException;

public class SimpleHashMap<K, V> implements Map<K, V> {

	public static void main(String[] args) {

		SimpleHashMap<Integer, Integer> shm = new SimpleHashMap(10);
		shm.put(1, 1);
		shm.put(2, 2);
		shm.put(3, 3);
		shm.put(4, 4);
		shm.put(5, 5);
		shm.put(6, 6);
		shm.put(7, 7);
		
		System.out.println(shm.get(199));
		System.out.println(shm.isEmpty());
		System.out.println(shm.size());
		System.out.println(shm.show());

		shm.put(8, 8);
		shm.put(9, 9);
		shm.put(10, 10);
		shm.put(11, 11);
		shm.put(12, 12);
		shm.put(20, 20);

		System.out.println(shm.show());
		
		

	}

	private Entry[] table;
	private int capacity;
	private int size;

	public SimpleHashMap() {
		table = new Entry[16];
		size = 0;
		this.capacity = 16;
	}

	public SimpleHashMap(int capacity) {
		table = (Entry<K, V>[]) new Entry[capacity];
		size = 0;
		this.capacity = capacity;

	}

	public String show() {

		String info = "";

		for (int i = 0; i < capacity; i++) {
			Entry<K, V> temp = table[i];

			info += i + "            ";

			if (temp == null) {
				info += "This position is empty!";
			}

			while (temp != null) {
				info += temp.toString() + " ";

				temp = temp.next;
			}
			info += "\n";
		}

		return info;
	}

	@Override
	public V get(Object object) {
		K objectK = (K) object;
		int index = index(objectK);
		if (find(index, objectK) != null){
			
			return find(index, objectK).getValue();
			
			
					}
		

		return null;
	}

	@Override
	public boolean isEmpty() {
		if (size == 0) {
			return true;
		}
		return false;
	}

	@Override
	public V put(K key, V value) {
		Entry<K, V> temp = table[index(key)];

		if (temp == null) {

			table[index(key)] = new Entry<K, V>(key, value);
			size++;
			reHash();
		}

		else {

			if (find(index(key), key) != null) {
				find(index(key), key).value = value;

				return value;

			} else {

				Entry<K, V> newEntry = new Entry<K, V>(key, value);
				table[index(key)] = newEntry;
				newEntry.next = temp;

				size++;
				reHash();

			}
		}

		return null;

	}

	private void reHash() {

		if ((size / capacity) > 0.75) {
			capacity *= 2;
			Entry<K, V>[] newTable = (Entry<K, V>[]) new Entry[capacity];

			for (int i = 0; i < capacity / 2; i++) {
				newTable[i] = table[i];
			}

			table = new Entry[capacity];

			table = newTable;

		}
	}
	
	private int index(K key) {

		int index = key.hashCode() % capacity;

		return Math.abs(index);

	}

	private Entry<K, V> find(int index, K key) {

		Entry<K, V> temp = table[index];
		while (temp != null) {

			if (temp.key == key) {

				return temp;
			}
			temp = temp.next;
		}

		return null;
	}

	@Override
	public V remove(Object key) {
		
		K objectK = (K) key;
		int index = index(objectK);
		
		if (find(index, objectK) == null){
			throw new NoSuchElementException();
		}
		
		

		return null;
	}

	@Override
	public int size() {

		return size;
	}

	private static class Entry<K, V> implements Map.Entry<K, V> {

		private K key;
		private V value;
		private Entry<K, V> next;

		public Entry(K key, V value) {
			this.key = key;
			this.value = value;
			next = null;
		}

		@Override
		public K getKey() {

			return key;
		}

		@Override
		public V getValue() {

			return value;
		}

		@Override
		public V setValue(V value) {

			return null;
		}

		public String toString() {

			return getKey() + "=" + getValue();

		}

	}

	

}
