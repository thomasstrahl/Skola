% -- pretty-print after type-inst-checking --------------
int: pi = 3;

float: pf = 3.0;

bool: pb = true;

set of int: psi = { 1 };

set of float: psf = { 1.3 };

set of bool: psb = { true };

var int: vi;

var 1 .. 3: vi123;

var float: vf;

var 1.0 .. 3.0: vf123;

var bool: vb;

string: ps = "foo";

var set of 1 .. 3: vsi;

var set of 1 .. 3: vsi123;

array[0 .. 5] of bool: arr_pb = [ true, false, true, false, true ];

array[0 .. 5] of var bool: arr_vb;

array[0 .. 5] of int: arr_pi = [ 1, 2, 3, 4, 5 ];

array[0 .. 5] of var int: arr_vi;

array[0 .. 5] of var 1 .. 3: arr_vi123 = 
  [ coerce(ti_par_int, ti_var_int, 1), coerce(ti_par_int, ti_var_int, 2), 
    coerce(ti_par_int, ti_var_int, 3), coerce(ti_par_int, ti_var_int, 1), 
    coerce(ti_par_int, ti_var_int, 2) ];

array[0 .. 5] of var 1.0 .. 3.0: arr_vf123 = 
  [ coerce(ti_par_float, ti_var_float, 1.0), 
    coerce(ti_par_float, ti_var_float, 2.1), 
    coerce(ti_par_float, ti_var_float, 2.9), 
    coerce(ti_par_float, ti_var_float, 1.6), 
    coerce(ti_par_float, ti_var_float, 2.8) ];

array[0 .. 5] of float: arr_pf = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];

array[0 .. 5] of var float: arr_vf;

array[0 .. 5] of set of int: arr_psi = 
  [ { 1 }, { 2 }, { 3 }, { 4 }, { 5 } ];

array[0 .. 1] of set of bool: arr_psb = [ { true }, { false } ];

array[0 .. 1] of set of float: arr_psf = [ { 1.1 }, { 2.2 } ];

array[0 .. 5] of var set of 1 .. 3: arr_vsi123;

array[0 .. 1, 0 .. 1] of int: arr_2_pi = 
  array2d(1 .. 2, 1 .. 2, [ 1, 2, 3, 4 ]);

array[0 .. 1, 0 .. 1, 0 .. 1] of int: arr_3_pi = 
  array3d(1 .. 2, 1 .. 2, 1 .. 2, [ 1, 2, 3, 4, 5, 6, 7, 8 ]);

array[0 .. 1, 0 .. 1, 0 .. 1, 0 .. 1] of int: arr_4_pi = 
  array4d(
    1 .. 2, 1 .. 2, 1 .. 2, 1 .. 2, 
    [ i | 
      i in 
        coerce(
          ti_par_set(ti_par_int), ti_array(ti_par_int, ti_par_int), 1 .. 16) ]);

array[0 .. 1, 0 .. 1, 0 .. 1, 0 .. 1, 0 .. 1] of int: arr_5_pi = 
  array5d(
    1 .. 2, 1 .. 2, 1 .. 2, 1 .. 2, 1 .. 2, 
    [ i | 
      i in 
        coerce(
          ti_par_set(ti_par_int), ti_array(ti_par_int, ti_par_int), 1 .. 32) ]);

array[0 .. 1, 0 .. 1, 0 .. 1, 0 .. 1, 0 .. 1, 0 .. 1] of int: arr_6_pi = 
  array6d(
    1 .. 2, 1 .. 2, 1 .. 2, 1 .. 2, 1 .. 2, 1 .. 2, 
    [ i | 
      i in 
        coerce(
          ti_par_set(ti_par_int), ti_array(ti_par_int, ti_par_int), 1 .. 64) ]);

bool: a00 = pi == pi;

var bool: a01 = coerce(ti_par_int, ti_var_int, pi) == vi;

var bool: a02 = vi == coerce(ti_par_int, ti_var_int, pi);

var bool: a03 = vi == vi;

bool: a10 = pi = pi;

var bool: a11 = coerce(ti_par_int, ti_var_int, pi) = vi;

var bool: a12 = vi = coerce(ti_par_int, ti_var_int, pi);

var bool: a13 = vi = vi;

bool: a20 = pi != pi;

var bool: a21 = coerce(ti_par_int, ti_var_int, pi) != vi;

var bool: a22 = vi != coerce(ti_par_int, ti_var_int, pi);

var bool: a23 = vi != vi;

bool: a30 = pi <= pi;

var bool: a31 = coerce(ti_par_int, ti_var_int, pi) <= vi;

var bool: a32 = vi <= coerce(ti_par_int, ti_var_int, pi);

var bool: a33 = vi <= vi;

bool: a40 = pi < pi;

var bool: a41 = coerce(ti_par_int, ti_var_int, pi) < vi;

var bool: a42 = vi < coerce(ti_par_int, ti_var_int, pi);

var bool: a43 = vi < vi;

bool: a50 = pi >= pi;

var bool: a51 = coerce(ti_par_int, ti_var_int, pi) >= vi;

var bool: a52 = vi >= coerce(ti_par_int, ti_var_int, pi);

var bool: a53 = vi >= vi;

bool: a60 = pi > pi;

var bool: a61 = coerce(ti_par_int, ti_var_int, pi) > vi;

var bool: a62 = vi > coerce(ti_par_int, ti_var_int, pi);

var bool: a63 = vi > vi;

int: b00 = pi + pi;

var int: b01 = coerce(ti_par_int, ti_var_int, pi) + vi;

var int: b02 = vi + coerce(ti_par_int, ti_var_int, pi);

var int: b03 = vi + vi;

float: b04 = pf + pf;

var float: b05 = coerce(ti_par_float, ti_var_float, pf) + vf;

var float: b06 = vf + coerce(ti_par_float, ti_var_float, pf);

var float: b07 = vf + vf;

int: b08 = + pi;

var int: b09 = + vi;

float: b10 = + pf;

var float: b11 = + vf;

int: b12 = pi - pi;

var int: b13 = coerce(ti_par_int, ti_var_int, pi) - vi;

var int: b14 = vi - coerce(ti_par_int, ti_var_int, pi);

var int: b15 = vi - vi;

float: b16 = pf - pf;

var float: b17 = coerce(ti_par_float, ti_var_float, pf) - vf;

var float: b18 = vf - coerce(ti_par_float, ti_var_float, pf);

var float: b19 = vf - vf;

int: b20 = - pi;

var int: b21 = - vi;

float: b22 = - pf;

var float: b23 = - vf;

int: b24 = pi * pi;

var int: b25 = coerce(ti_par_int, ti_var_int, pi) * vi;

var int: b26 = vi * coerce(ti_par_int, ti_var_int, pi);

var int: b27 = vi * vi;

float: b28 = pf * pf;

var float: b29 = coerce(ti_par_float, ti_var_float, pf) * vf;

var float: b30 = vf * coerce(ti_par_float, ti_var_float, pf);

var float: b31 = vf * vf;

int: b32 = pi div pi;

var int: b33 = coerce(ti_par_int, ti_var_int, pi) div vi;

var int: b34 = vi div coerce(ti_par_int, ti_var_int, pi);

var int: b35 = vi div vi;

int: b36 = pi mod pi;

var int: b37 = coerce(ti_par_int, ti_var_int, pi) mod vi;

var int: b38 = vi mod coerce(ti_par_int, ti_var_int, pi);

var int: b39 = vi mod vi;

float: b40 = pf / pf;

var float: b41 = coerce(ti_par_float, ti_var_float, pf) / vf;

var float: b42 = vf / coerce(ti_par_float, ti_var_float, pf);

var float: b43 = vf / vf;

int: b50 = sum(arr_pi);

var int: b51 = sum(arr_vi);

float: b52 = sum(arr_pf);

var float: b53 = sum(arr_vf);

int: b54 = product(arr_pi);

var int: b55 = product(arr_vi);

float: b56 = product(arr_pf);

var float: b57 = product(arr_vf);

int: b60 = min(pi, pi);

int: b61 = min([ pi, pi ]);

int: b62 = min({ pi, pi });

float: b63 = min(pf, pf);

float: b64 = min([ pf, pf ]);

float: b65 = min({ pf, pf });

int: b70 = max(pi, pi);

int: b71 = max([ pi, pi ]);

int: b72 = max({ pi, pi });

float: b73 = max(pf, pf);

float: b74 = max([ pf, pf ]);

float: b75 = max({ pf, pf });

int: b80 = abs(pi);

var int: b81 = abs(vi);

float: b82 = abs(pf);

var float: b83 = abs(vf);

float: b90 = sqrt(pf);

int: b91 = pow(pi, pi);

float: b92 = pow(pf, pf);

float: b93 = ln(pf);

float: b94 = log10(pf);

float: b95 = log2(pf);

float: b96 = log(pf, pf);

float: b97 = sin(pf);

float: b98 = cos(pf);

float: b99 = tan(pf);

float: b100 = asin(pf);

float: b101 = acos(pf);

float: b102 = atan(pf);

float: b103 = sinh(pf);

float: b104 = cosh(pf);

float: b105 = tanh(pf);

bool: c00 = pb <-> pb;

var bool: c01 = coerce(ti_par_bool, ti_var_bool, pb) <-> vb;

var bool: c02 = vb <-> coerce(ti_par_bool, ti_var_bool, pb);

var bool: c03 = vb <-> vb;

bool: c10 = pb <- pb;

var bool: c11 = coerce(ti_par_bool, ti_var_bool, pb) <- vb;

var bool: c12 = vb <- coerce(ti_par_bool, ti_var_bool, pb);

var bool: c13 = vb <- vb;

bool: c14 = pb -> pb;

var bool: c15 = coerce(ti_par_bool, ti_var_bool, pb) -> vb;

var bool: c16 = vb -> coerce(ti_par_bool, ti_var_bool, pb);

var bool: c17 = vb -> vb;

bool: c20 = pb \/ pb;

var bool: c21 = coerce(ti_par_bool, ti_var_bool, pb) \/ vb;

var bool: c22 = vb \/ coerce(ti_par_bool, ti_var_bool, pb);

var bool: c23 = vb \/ vb;

bool: c24 = pb /\ pb;

var bool: c25 = coerce(ti_par_bool, ti_var_bool, pb) /\ vb;

var bool: c26 = vb /\ coerce(ti_par_bool, ti_var_bool, pb);

var bool: c27 = vb /\ vb;

bool: c30 = pb xor pb;

var bool: c31 = coerce(ti_par_bool, ti_var_bool, pb) xor vb;

var bool: c32 = vb xor coerce(ti_par_bool, ti_var_bool, pb);

var bool: c33 = vb xor vb;

bool: c40 = not pb;

var bool: c41 = not vb;

bool: c50 = forall(arr_pb);

var bool: c51 = forall(arr_vb);

bool: c60 = exists(arr_pb);

var bool: c61 = exists(arr_vb);

bool: d00 = pi in psi;

var bool: d01 = coerce(ti_par_int, ti_var_int, pi) in vsi;

var bool: d02 = 
  vi in coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var bool: d03 = vi in vsi;

bool: d10 = psi subset psi;

var bool: d11 = 
  coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi) subset vsi;

var bool: d12 = 
  vsi subset coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var bool: d13 = vsi subset vsi;

bool: d14 = psi superset psi;

var bool: d15 = 
  coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi) superset vsi;

var bool: d16 = 
  vsi superset coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var bool: d17 = vsi superset vsi;

set of 1 .. 3: d20 = psi union psi;

var set of 1 .. 3: d21 = 
  coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi) union vsi;

var set of 1 .. 3: d22 = 
  vsi union coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var set of 1 .. 3: d23 = vsi union vsi;

set of 1 .. 3: d24 = psi intersect psi;

var set of 1 .. 3: d25 = 
  coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi) intersect vsi;

var set of 1 .. 3: d26 = 
  vsi intersect coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var set of 1 .. 3: d27 = vsi intersect vsi;

set of 1 .. 3: d30 = psi diff psi;

var set of 1 .. 3: d31 = 
  coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi) diff vsi;

var set of 1 .. 3: d32 = 
  vsi diff coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var set of 1 .. 3: d33 = vsi diff vsi;

set of 1 .. 3: d34 = psi symdiff psi;

var set of 1 .. 3: d35 = 
  coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi) symdiff vsi;

var set of 1 .. 3: d36 = 
  vsi symdiff coerce(ti_par_set(ti_par_int), ti_var_set(ti_par_int), psi);

var set of 1 .. 3: d37 = vsi symdiff vsi;

set of 1 .. 3: d40 = pi .. pi;

int: d50 = card(psi);

int: d51 = card(psb);

int: d52 = card(psf);

var int: d53 = card(vsi);

set of int: d60 = array_union(arr_psi);

set of float: d61 = array_union(arr_psf);

set of bool: d62 = array_union(arr_psb);

var set of 1 .. 3: d63 = array_union(arr_vsi123);

set of int: d64 = array_intersect(arr_psi);

set of float: d65 = array_intersect(arr_psf);

set of bool: d66 = array_intersect(arr_psb);

var set of 1 .. 3: d67 = array_intersect(arr_vsi123);

int: e00 = length(arr_pi);

int: e01 = length(arr_vf);

array[1 .. 3] of int: e10 = arr_pi ++ arr_pi;

array[1 .. 3] of var int: e11 = 
  coerce(
    ti_array(ti_par_int, ti_par_int), ti_array(ti_par_int, ti_var_int), 
    arr_pi) ++ arr_vi;

array[1 .. 3] of var int: e12 = 
  arr_vi ++ 
  coerce(
    ti_array(ti_par_int, ti_par_int), ti_array(ti_par_int, ti_var_int), 
    arr_pi);

array[1 .. 3] of var int: e13 = arr_vi ++ arr_vi;

set of int: e20 = index_set(arr_pi);

set of int: e21 = index_set(arr_vf);

set of int: e22 = index_set_1of2(arr_2_pi);

set of int: e23 = index_set_2of2(arr_2_pi);

set of int: e24 = index_set_1of3(arr_3_pi);

set of int: e25 = index_set_2of3(arr_3_pi);

set of int: e26 = index_set_3of3(arr_3_pi);

array[1 .. 3] of int: e30 = array1d(psi, arr_pi);

array[1 .. 3, 1 .. 3] of int: e31 = array2d(psi, psi, arr_pi);

array[1 .. 3, 1 .. 3, 1 .. 3] of int: e32 = array3d(psi, psi, psi, arr_pi);

int: f00 = ceil(pf);

int: f01 = floor(pf);

int: f02 = round(pf);

int: i10 = bool2int(pb);

var int: i11 = bool2int(vb);

float: i20 = int2float(pi);

var float: i21 = int2float(vi);

array[0 .. 3] of int: i30 = set2array(psi);

array[0 .. 3] of float: i31 = set2array(psf);

array[0 .. 3] of bool: i32 = set2array(psb);

string: j00 = ps ++ ps;

string: j10 = show(pf);

string: j11 = show(vi);

string: j12 = show(vsi);

string: j13 = show(arr_vsi123);

int: k10 = lb(vi123);

int: k11 = lb_array(arr_vi123);

float: k12 = lb(vf123);

float: k13 = lb_array(arr_vf123);

int: k20 = ub(vi123);

int: k21 = ub_array(arr_vi123);

float: k22 = ub(vf123);

float: k23 = ub_array(arr_vf123);

set of int: k24 = ub(vsi123);

set of int: k25 = ub_array(arr_vsi123);

set of int: k30 = dom(vi123);

set of int: k31 = dom_array(arr_vi123);

int: k00 = assert(pb, "s", pi);

var set of 1 .. 3: k01 = assert(pb, "s", vsi);

var set of 1 .. 3: k02 = 
  coerce(ti_var_bottom, ti_var_set(ti_par_int), assert(pb, "s", _));

bool: k03 = assert(pb, "s");

int: k40 = coerce(ti_par_bottom, ti_par_int, abort("foo"));

int: k41 = 
  if true then 3 else coerce(ti_par_bottom, ti_par_int, abort("foo")) endif;

var int: k50;

int: k51 = fix(k50);

int: k52 = fix(k51);

array[1 .. 5] of var int: k53;

array[1 .. 5] of int: k54 = fix(k53);

var int: vi4::bounds;

var int: vi5::bitmap(1, 10);

var int: vi6::cardinality;

constraint '<'(vi, vi)::bounds;

constraint '<'(vi, vi)::boundsZ;

constraint '<'(vi, vi)::boundsR;

constraint '<'(vi, vi)::boundsD;

constraint '<'(vi, vi)::domain;

constraint '<'(vi, vi)::priority(3);

constraint '<'(vi, vi)::multiple([ "prop1", "prop2" ]);

constraint '<'(vi, vi)::staged([ "sprop3", "sprop4" ]);

solve 
  ::int_search([ vi4, vi5, vi6 ], first_fail, indomain, complete)
  ::bool_search([ vb, vb ], input_order, indomain_min, complete)
  ::float_search([ vf, vf ], 0.01, input_order, indomain_split, complete)
  ::set_search([ vsi, vsi ], input_order, indomain_min, complete)
  ::labelling_ff satisfy;
