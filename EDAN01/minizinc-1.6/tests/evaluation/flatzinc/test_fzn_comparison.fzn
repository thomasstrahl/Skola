% RUNS ON flatzinc
% RUNS ON fzn_fdlp
var bool: b1;
var bool: b2;
var bool: b3;
var bool: b4;
var bool: b5;
var bool: b6;

var bool: rb1;
var bool: rb2;
var bool: rb3;
var bool: rb4;
var bool: rb5;
var bool: rb6;

var 1.0..10.0: f1;
var 1.0..10.0: f2;
var 1.0..10.0: f3;
var 1.0..10.0: f4;
var 1.0..10.0: f5;
var 1.0..10.0: f6;

var bool: rf1;
var bool: rf2;
var bool: rf3;
var bool: rf4;
var bool: rf5;
var bool: rf6;

var 1..10: i1;
var 1..10: i2;
var 1..10: i3;
var 1..10: i4;
var 1..10: i5;
var 1..10: i6;

var bool: ri1;
var bool: ri2;
var bool: ri3;
var bool: ri4;
var bool: ri5;
var bool: ri6;

array [1..3] of var 1.0..10.0: fa1;
array [1..3] of var 1.0..10.0: fa2;
array [1..3] of var 1.0..10.0: fa3;
array [1..3] of var 1.0..10.0: fa4;
array [1..3] of var 1.0..10.0: fa5;

var bool: rfa1;
var bool: rfa2;
var bool: rfa3;
var bool: rfa4;
var bool: rfa5;

array [1..3] of var 1..10: ia1;
array [1..3] of var 1..10: ia2;
array [1..3] of var 1..10: ia3;
array [1..3] of var 1..10: ia4;
array [1..3] of var 1..10: ia5;

var bool: ria1;
var bool: ria2;
var bool: ria3;
var bool: ria4;
var bool: ria5;

var set of 1..3: s1;
var set of 1..3: s2;
var set of 1..3: s3;
var set of 1..3: s4;
var set of 1..3: s5;
var set of 1..3: s6;

var bool: rs1;
var bool: rs2;
var bool: rs3;
var bool: rs4;
var bool: rs5;
var bool: rs6;

% int_{lt,le,eq,ne}

constraint int_lt(2, 3);
constraint int_lt(2, i1);
constraint int_lt(i1, 9);

constraint int_le(2, 3);
constraint int_le(2, i2);
constraint int_le(i2, 9);

constraint int_le(2, i3);
constraint int_le(i3, 9);

constraint int_lt(2, i4);
constraint int_lt(i4, 9);

constraint int_eq(2, 2);
constraint int_eq(2, i5);

constraint int_ne(2, 3);
constraint int_ne(1, i6);

% int_{lt,le,eq,ne}_reif

constraint int_lt_reif(2, 3, ri1);
constraint int_lt_reif(2, i1, ri1);
constraint int_lt_reif(i1, 9, ri1);

constraint int_le_reif(2, 3, ri2);
constraint int_le_reif(2, i2, ri2);
constraint int_le_reif(i2, 9, ri2);

constraint int_le_reif(2, 3, ri3);
constraint int_le_reif(2, i3, ri3);
constraint int_le_reif(i3, 9, ri3);

constraint int_lt_reif(2, 3, ri4);
constraint int_lt_reif(2, i4, ri4);
constraint int_lt_reif(i4, 9, ri4);

constraint int_eq_reif(2, 2, ri5);
constraint int_eq_reif(2, i5, ri5);

constraint int_ne_reif(2, 3, ri6);
constraint int_ne_reif(1, i6, ri6);

% float_{lt,le,ge,gt,eq,ne}

% constraint float_lt(2.0, 3.0);
% constraint float_lt(2.0, f1);
% constraint float_lt(f1, 9.0);

constraint float_le(2.0, 3.0);
constraint float_le(2.0, f2);
constraint float_le(f2, 9.0);

constraint float_le(2.0, f3);
constraint float_le(f3, 9.0);

constraint float_eq(2.0, 2.0);
constraint float_eq(2.0, f5);

% constraint float_ne(2.0, 3.0);
% constraint float_ne(2.0, f6);

% float_{lt,le,eq,ne}_reif

% constraint float_lt_reif(2.0, 3.0, rf1);
% constraint float_lt_reif(2.0, f1, rf1);
% constraint float_lt_reif(f1, 9.0, rf1);

constraint float_le_reif(2.0, 3.0, rf2);
constraint float_le_reif(2.0, f2, rf2);
constraint float_le_reif(f2, 9.0, rf2);

constraint float_le_reif(2.0, 3.0, rf3);
constraint float_le_reif(2.0, f3, rf3);
constraint float_le_reif(f3, 9.0, rf3);

constraint float_eq_reif(2.0, 2.0, rf5);
constraint float_eq_reif(2.0, f5, rf5);

% constraint float_ne_reif(2.0, 3.0, rf6);
% constraint float_ne_reif(2.0, f6, rf6);

% set_{lt,le,gt,ge,eq,ne}

constraint set_lt({}, {1, 2, 3});
constraint set_lt({}, s1);
constraint set_lt(s1, {1, 2, 3});

constraint set_le({}, {1, 2, 3});
constraint set_le({1}, s2);
constraint set_le(s2, {1, 2, 3});

constraint set_lt({}, {1, 2, 3});
constraint set_lt({}, s3);
constraint set_lt(s3, {1, 2, 3});

constraint set_le({}, {1, 2, 3});
constraint set_le({1}, s4);
constraint set_le(s4, {1, 2, 3});

constraint set_eq({1, 2, 3}, {1, 2, 3});
constraint set_eq(s5, {1, 2, 3});

constraint set_ne({}, {1, 2, 3});
constraint set_ne(s6, {1, 2, 3});

% int_lin_{lt,le,gt,ge,eq}

% constraint int_lin_lt([1, 2, 3], [1, 2, 3], 100);
% constraint int_lin_lt([1, 2, 3], ia1, 10);

constraint int_lin_le([1, 2, 3], [1, 2, 3], 100);
constraint int_lin_le([1, 2, 3], ia2, 10);

% constraint int_lin_gt([1, 2, 3], [1, 2, 3], 10);
% constraint int_lin_gt([1, 2, 3], ia3, 10);

constraint int_lin_le([-1, -2, -3], [1, 2, 3], -10);
constraint int_lin_le([-1, -2, -3], ia4, -10);

constraint int_lin_eq([1, 2, 3], [1, 2, 3], 14);
constraint int_lin_eq([1, 2, 3], ia5, 14);

% int_lin_{lt,le,gt,ge,eq}_reif

% constraint int_lin_lt_reif([1, 2, 3], [1, 2, 3], 100, ria1);
% constraint int_lin_lt_reif([1, 2, 3], ia1, 10, ria1);

constraint int_lin_le_reif([1, 2, 3], [1, 2, 3], 100, ria2);
constraint int_lin_le_reif([1, 2, 3], ia2, 10, ria2);

% constraint int_lin_gt_reif([1, 2, 3], [1, 2, 3], 10, ria3);
% constraint int_lin_gt_reif([1, 2, 3], ia3, 10, ria3);

constraint int_lin_le_reif([-1, -2, -3], [1, 2, 3], -10, ria4);
constraint int_lin_le_reif([-1, -2, -3], ia4, -10, ria4);

constraint int_lin_eq_reif([1, 2, 3], [1, 2, 3], 14, ria5);
constraint int_lin_eq_reif([1, 2, 3], ia5, 14, ria5);

solve satisfy;
